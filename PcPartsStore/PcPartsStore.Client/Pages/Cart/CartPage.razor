@page "/cart"
@using Shared.Dto
@using Shared.Services
@using Shared.Models
@inject ICartItemApiService CartService
@inject IOrderApiService OrderService
@inject NavigationManager NavigationManager
@inject SpinnerService SpinnerService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<div class="container py-5">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="fw-bold display-6 mb-0">
                <i class="bi bi-cart3 me-3 text-primary"></i>Your Shopping Cart
            </h1>
        </div>
    </div>

    @if (CartProducts == null || !CartProducts.Any())
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <div class="mb-4">
                    <i class="bi bi-cart-x text-secondary" style="font-size: 4rem;"></i>
                </div>
                <h3 class="mb-3">Your cart is empty</h3>
                <p class="text-muted mb-4">Continue shopping and add some PC parts to your cart!</p>
                <button class="btn btn-primary" @onclick="NavigateToProducts">
                    <i class="bi bi-shop me-2"></i>Browse Products
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="row g-4">
            <div class="col-lg-8">
                <div class="card shadow-sm">
                    <div class="card-header bg-transparent">
                        <h5 class="mb-0">Cart Items (@CartProducts.Count)</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush">
                            @foreach (var cartItem in CartProducts)
                            {
                                <div class="list-group-item p-3 border-bottom">
                                    <div class="row align-items-center">
                                        <div class="col-md-2 mb-3 mb-md-0">
                                            <img src="data:image/jpeg;base64,@cartItem.Product.ImageBase64"
                                                 class="img-fluid rounded"
                                                 alt="@cartItem.Product.Name"
                                                 style="object-fit: cover; max-height: 100px;">
                                        </div>
                                        <div class="col-md-6 mb-3 mb-md-0">
                                            <h5 class="mb-1">@cartItem.Product.Name</h5>
                                            <p class="text-muted small mb-1">
                                                @{
                                                    bool isExpanded = expandedDescriptions.Contains(cartItem.ProductId);
                                                    string displayDescription = isExpanded || cartItem.Product.Description.Length <= 100
                                                    ? cartItem.Product.Description
                                                    : cartItem.Product.Description.Substring(0, 100) + "...";
                                                }
                                                @displayDescription
                                                @if (cartItem.Product.Description.Length > 100)
                                                {
                                                    <button class="btn btn-link btn-sm p-0"
                                                            @onclick="() => ToggleDescription(cartItem.ProductId)">
                                                        @(expandedDescriptions.Contains(cartItem.ProductId) ? "Show less" : "Show more")
                                                    </button>
                                                }
                                            </p>
                                            <div class="text-primary fw-bold">@cartItem.Product.Price.ToString("C")</div>
                                        </div>
                                        <div class="col-md-2 mb-3 mb-md-0">
                                            <div class="d-flex align-items-center">
                                                <select class="form-select form-select-sm"
                                                        @bind="cartItem.Quantity"
                                                        @bind:event="onchange"
                                                        @bind:after="async () => await UpdateQuantity(cartItem)">
                                                    @for (int i = 1; i <= 10; i++)
                                                    {
                                                        <option value="@i">@i</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-2 text-end">
                                            <button class="btn btn-outline-danger btn-sm"
                                                    @onclick="() => RemoveFromCart(cartItem.CartItemId)">
                                                <i class="bi bi-trash me-1"></i> Remove
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-transparent">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-3">
                            <span>Subtotal</span>
                            <span class="fw-bold">@(CartProducts.Sum(c => c.Product.Price * c.Quantity).ToString("C"))</span>
                        </div>
                        <div class="d-flex justify-content-between mb-3">
                            <span>Items</span>
                            <span>@CartProducts.Sum(c => c.Quantity)</span>
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between mb-4">
                            <span class="fw-bold">Total</span>
                            <span class="fw-bold fs-5 text-primary">@(CartProducts.Sum(c => c.Product.Price * c.Quantity).ToString("C"))</span>
                        </div>
                        <button class="btn btn-primary w-100" @onclick="ConfirmCheckout">
                            <i class="bi bi-credit-card me-2"></i>Proceed to Checkout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (showConfirmationDialog)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content shadow">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-credit-card me-2"></i>Confirm Checkout</h5>
                    <button type="button" class="btn-close" @onclick="CancelCheckout"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to proceed with the checkout?</p>
                    <p class="text-muted small">Your order total is: <strong>@(CartProducts.Sum(c => c.Product.Price * c.Quantity).ToString("C"))</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CancelCheckout">
                        <i class="bi bi-x me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="async () => await ProceedToCheckout()">
                        <i class="bi bi-check2 me-2"></i>Yes, Proceed
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public decimal TotalPrice { get; set; }
    public List<CartProductsDto> CartProducts { get; set; } = new List<CartProductsDto>();
    private HashSet<int> expandedDescriptions = new HashSet<int>();
    private bool showConfirmationDialog = false;

    protected override async Task OnInitializedAsync()
    {
        await SpinnerService.ShowSpinnerAsync();
        CartProducts = await CartService.GetCartProductsByUserIdAsync();
        await SpinnerService.HideSpinnerAsync();
    }

    private void ToggleDescription(int productId)
    {
        if (expandedDescriptions.Contains(productId))
        {
            expandedDescriptions.Remove(productId);
        }
        else
        {
            expandedDescriptions.Add(productId);
        }
    }

    private async Task UpdateQuantity(CartProductsDto cartItem)
    {
        try
        {
            await CartService.UpdateCartItemAsync(new Shared.Requests.CartItemRequest
                {
                    ProductId = cartItem.ProductId,
                    Quantity = cartItem.Quantity

                }, cartItem.CartItemId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating quantity: {ex.Message}");
        }
    }

    private async Task RemoveFromCart(int cartItemId)
    {
        try
        {
            await CartService.DeleteCartItemAsync(cartItemId);
            CartProducts.RemoveAll(c => c.CartItemId == cartItemId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing cart item: {ex.Message}");
        }
    }

    private void ConfirmCheckout()
    {
        showConfirmationDialog = true;
    }

    private void CancelCheckout()
    {
        showConfirmationDialog = false;
    }

    private async Task ProceedToCheckout()
    {
        try
        {
            await SpinnerService.ShowSpinnerAsync();
            
            var order = await OrderService.CreateOrderAsync();
            
            await SpinnerService.HideSpinnerAsync();
            showConfirmationDialog = false;
            
            NavigationManager.NavigateTo($"/order-confirmation/{order.Id}");
        }
        catch (Exception ex)
        {
            await SpinnerService.HideSpinnerAsync();
            showConfirmationDialog = false;
            Console.WriteLine($"Error creating order: {ex.Message}");
            NavigationManager.NavigateTo("/products");
        }
    }

    private void NavigateToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }
}
