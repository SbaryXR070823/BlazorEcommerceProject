@page "/my-orders"
@using Shared.Models
@using Shared.Services
@using Microsoft.AspNetCore.Authorization
@inject IOrderApiService OrderService
@inject SpinnerService SpinnerService
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<div class="container">
    <h1 class="my-4">My Orders</h1>

    @if (orders == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading your orders...</p>
        </div>
    }
    else if (!orders.Any())
    {
        <div class="alert alert-info">
            <p>You haven't placed any orders yet.</p>
            <button class="btn btn-primary mt-2" @onclick="NavigateToProducts">
                Browse Products
            </button>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Date</th>
                        <th>Total Amount</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.Id</td>
                            <td>@order.OrderDate.ToString("MMMM dd, yyyy HH:mm")</td>
                            <td>@order.TotalAmount.ToString("C")</td>
                            <td>
                                <button class="btn btn-primary btn-sm" 
                                        @onclick="() => ViewOrderDetails(order.Id)">
                                    View Details
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        await SpinnerService.ShowSpinnerAsync();
        try 
        {
            orders = await OrderService.GetUserOrdersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
            orders = new List<Order>();
        }
        finally
        {
            await SpinnerService.HideSpinnerAsync();
        }
    }

    private void ViewOrderDetails(int orderId)
    {
        NavigationManager.NavigateTo($"/order-confirmation/{orderId}");
    }

    private void NavigateToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }
}