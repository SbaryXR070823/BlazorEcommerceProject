@page "/my-orders"
@using Shared.Models
@using Shared.Services
@using Microsoft.AspNetCore.Authorization
@inject IOrderApiService OrderService
@inject SpinnerService SpinnerService
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<div class="container py-5">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="fw-bold display-6 mb-0">
                <i class="bi bi-clipboard-data me-3 text-primary"></i>Your Order History
            </h1>
            <p class="text-muted mt-2">Track all your PC parts purchases in one place</p>
        </div>
    </div>

    @if (orders == null)
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading your orders...</p>
            </div>
        </div>
    }
    else if (!orders.Any())
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <div class="mb-4">
                    <i class="bi bi-bag-x text-secondary" style="font-size: 4rem;"></i>
                </div>
                <h3 class="mb-3">No orders yet</h3>
                <p class="text-muted mb-4">You haven't placed any orders with us yet. Start shopping to see your order history here!</p>
                <button class="btn btn-primary" @onclick="NavigateToProducts">
                    <i class="bi bi-shop me-2"></i>Browse Products
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-transparent">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Your Orders (@orders.Count)</h5>
                    <button class="btn btn-outline-primary btn-sm" @onclick="NavigateToProducts">
                        <i class="bi bi-shop me-2"></i>Continue Shopping
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="list-group list-group-flush">
                    @foreach (var order in orders)
                    {
                        <div class="list-group-item p-4 border-bottom">
                            <div class="row">
                                <div class="col-md-3 mb-3 mb-md-0">
                                    <div class="badge bg-primary mb-2 py-2 px-3">Order #@order.Id</div>
                                    <div class="text-muted small">
                                        <i class="bi bi-calendar3 me-1"></i> @order.OrderDate.ToString("MMM dd, yyyy")
                                    </div>
                                    <div class="text-muted small">
                                        <i class="bi bi-clock me-1"></i> @order.OrderDate.ToString("HH:mm")
                                    </div>
                                </div>
                                <div class="col-md-5 mb-3 mb-md-0">
                                    <h6 class="mb-2">Order Details</h6>
                                    <p class="text-muted small mb-1">
                                        <i class="bi bi-box-seam me-1"></i> Items: @(order.OrderItems?.Count ?? 0)
                                    </p>
                                    @if (order.OrderItems != null && order.OrderItems.Any() && order.OrderItems.Count <= 2)
                                    {
                                        <ul class="list-unstyled small mb-0">
                                            @foreach(var item in order.OrderItems)
                                            {
                                                <li class="text-muted">• @item.Product?.Name (@item.Quantity)</li>
                                            }
                                        </ul>
                                    }
                                    else if (order.OrderItems != null && order.OrderItems.Count > 2)
                                    {
                                        <ul class="list-unstyled small mb-0">
                                            @foreach(var item in order.OrderItems.Take(2))
                                            {
                                                <li class="text-muted">• @item.Product?.Name (@item.Quantity)</li>
                                            }
                                            <li class="text-muted">• And @(order.OrderItems.Count - 2) more items...</li>
                                        </ul>
                                    }
                                </div>
                                <div class="col-md-2 mb-3 mb-md-0">
                                    <h6 class="mb-2">Total</h6>
                                    <div class="fw-bold text-primary fs-5">@order.TotalAmount.ToString("C")</div>
                                </div>
                                <div class="col-md-2 text-md-end d-flex flex-md-column align-items-start align-items-md-end justify-content-between">
                                    <button class="btn btn-primary" @onclick="() => ViewOrderDetails(order.Id)">
                                        <i class="bi bi-eye me-md-2 d-none d-md-inline"></i>
                                        <span class="d-none d-md-inline">View Details</span>
                                        <span class="d-inline d-md-none">View</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        await SpinnerService.ShowSpinnerAsync();
        try 
        {
            orders = await OrderService.GetUserOrdersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
            orders = new List<Order>();
        }
        finally
        {
            await SpinnerService.HideSpinnerAsync();
        }
    }

    private void ViewOrderDetails(int orderId)
    {
        NavigationManager.NavigateTo($"/order-confirmation/{orderId}");
    }

    private void NavigateToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }
}