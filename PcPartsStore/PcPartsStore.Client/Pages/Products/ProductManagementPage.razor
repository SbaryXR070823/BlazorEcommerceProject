@page "/products"
@using PcPartsStore.Client.Services
@using Shared.Dto
@using Shared.Models
@using Shared.Requests
@using Shared.Services
@using System.Timers
@implements IDisposable
@inject NavigationManager Navigation
@inject IUserApiService UserService
@inject IProductApiService ProductService
@inject ICategoryApiService CategoryService
@inject SpinnerService SpinnerService
@inject ICartItemApiService CartService
@inject LocalStorageService LocalStorageService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Manage Products</PageTitle>
<div class="container mt-4" @onclick="HandlePageClick">
    @if (!isAdmin)
    {
        <div class="floating-cart" @onclick="GoToCart">
            <i class="bi bi-cart-fill"></i>
            @if (currentCountOfCartItems > 0)
            {
                <span class="cart-badge">@currentCountOfCartItems</span>
            }
        </div>
    }
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Product Management</h3>
        @if (isAdmin)
        {
            <button @onclick="AddNewProduct" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Add New Product
            </button>
        }
    </div>

    <div class="card shadow mb-4">
        <div class="card-header bg-light">
            <h5 class="m-0">Filters</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3 search-container" @onclick:stopPropagation>
                    <label class="form-label">Product Name</label>
                    <input type="text" @oninput="HandleSearchInput" @bind="filters.Name" placeholder="Search by name" class="form-control search-input" />
                    @if (showSuggestions && searchSuggestions.Any())
                    {
                        <div class="suggestions-dropdown">
                            @foreach (var suggestion in searchSuggestions)
                            {
                                <div class="suggestion-item" @onclick="() => SelectSuggestion(suggestion)">
                                    @suggestion
                                </div>
                            }
                        </div>
                    }
                </div>
                <!-- Rest of the form fields unchanged -->
                <div class="col-md-3">
                    <label class="form-label">Category</label>
                    <select @bind="filters.Category" class="form-select">
                        <option value="">All Categories</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Min Price ($)</label>
                    <input type="number" @bind="filters.MinPrice" placeholder="Min Price" class="form-control" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Max Price ($)</label>
                    <input type="number" @bind="filters.MaxPrice" placeholder="Max Price" class="form-control" />
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button @onclick="ApplyFilters" class="btn btn-primary w-100">
                        <i class="bi bi-funnel"></i> Apply
                    </button>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button @onclick="ClearFilters" class="btn btn-secondary w-100">
                        <i class="bi bi-x-circle"></i> Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>
    @if (products != null && products.Count > 0)
    {
        var groupedProducts = products.GroupBy(p => p.CategoryId);

        @foreach (var categoryGroup in groupedProducts)
        {
            var categoryName = categories.FirstOrDefault(c => c.Id == categoryGroup.Key)?.Name ?? "Uncategorized";

            <div class="category-section mb-4">
                <h4 class="category-title">@categoryName</h4>
                <div class="d-flex flex-row flex-wrap gap-3">
                    @foreach (var product in categoryGroup)
                    {
                        <div class="card h-100 shadow-sm hover-shadow product-card" style="max-width: 400px">
                            <div class="product-image-container text-center p-3" style="height: 200px; overflow: hidden;">
                                @if (!string.IsNullOrEmpty(product.ImageBase64))
                                {
                                    <img src="data:image/png;base64,@product.ImageBase64" class="product-image"
                                         alt="@product.Name" style="max-height: 180px; max-width: 100%; object-fit: contain;" />
                                }
                                else
                                {
                                    <div class="no-image-placeholder d-flex align-items-center justify-content-center h-100 bg-light">
                                        <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                                    </div>
                                }
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text text-truncate mb-1">@product.Description</p>
                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <span class="price-tag h5 mb-0 mx-2 text-primary">$@product.Price.ToString("0.00")</span>
                                    <div>
                                        @if (isAdmin)
                                        {
                                            <button class="btn btn-outline-primary me-2" @onclick="() => EditProduct(product.Id)">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => ConfirmDelete(product.Id)">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-outline-info me-2" @onclick="() => ViewProduct(product.Id)">
                                                <i class="bi bi-search"></i> View
                                            </button>
                                            <button class="btn btn-outline-success me-2" @onclick="() => AddToCart(product.Id)">
                                                <i class="bi bi-cart-plus"></i> Add to Cart
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info text-center p-5 mt-4">
            <i class="bi bi-info-circle" style="font-size: 2rem;"></i>
            <p class="mt-3 mb-0">No products found</p>
        </div>
    }
</div>

@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this product?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteProduct">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Product> products;
    private List<Category> categories = new();
    private ProductFilters filters = new ProductFilters();
    private bool showDeleteModal = false;
    private int productIdToDelete;
    private bool isAdmin = false;
    private List<string> userRoles = new List<string>();
    private UserInfoDto userData = new UserInfoDto();
    private int currentCountOfCartItems = 0;

    private string searchInput;
    private bool showSuggestions = false;
    private List<string> searchSuggestions = new List<string>();
    private const string SearchHistoryKey = "ProductSearchHistory";
    private System.Timers.Timer _debounceTimer;
    private bool _documentClickAdded = false;

    protected override async Task OnInitializedAsync()
    {
        await SpinnerService.ShowSpinnerAsync();
        userData = await UserService.GetUserInfoAsync();
        categories = await CategoryService.GetCategoriesAsync();
        products = await ProductService.GetProductsAsync(filters);
        userRoles = await UserService.GetUserRoleAsync();
        if (userRoles == null || !userRoles.Any() || userRoles.Contains("User"))
        {
            isAdmin = false;
            currentCountOfCartItems = await CartService.GetCountOfCartItemsAsync();
        }
        else
        {
            isAdmin = userRoles.Contains("Admin");
        }

        _debounceTimer = new System.Timers.Timer(300);
        _debounceTimer.Elapsed += OnDebounceElapsed;
        _debounceTimer.AutoReset = false;

        await SpinnerService.HideSpinnerAsync();
    }
    
    private void HandlePageClick()
    {
        if (showSuggestions)
        {
            showSuggestions = false;
            StateHasChanged();
        }
    }

    private void GoToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private async Task ApplyFilters()
    {
        await SpinnerService.ShowSpinnerAsync();
        products = await ProductService.GetProductsAsync(filters);

        if (!string.IsNullOrEmpty(filters.Name))
        {
            await SaveSearchTerm(filters.Name);
        }

        await SpinnerService.HideSpinnerAsync();
    }

    private async Task SaveSearchTerm(string term)
    {
        var searchHistory = await LocalStorageService.GetItemAsync<List<SearchHistoryItem>>(SearchHistoryKey) ?? new List<SearchHistoryItem>();
        var existingItem = searchHistory.FirstOrDefault(s => s.Term.Equals(term, StringComparison.OrdinalIgnoreCase));

        if (existingItem != null)
        {
            existingItem.Timestamp = DateTime.UtcNow;
        }
        else
        {
            searchHistory.Add(new SearchHistoryItem { Term = term, Timestamp = DateTime.UtcNow });
        }

        await LocalStorageService.SaveItemAsync(SearchHistoryKey, searchHistory);
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchInput = e.Value?.ToString();

        _debounceTimer.Stop();
        _debounceTimer.Start();
    }

    private async void OnDebounceElapsed(object sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            filters.Name = searchInput;
            if (!string.IsNullOrEmpty(filters.Name))
            {
                var searchHistory = await LocalStorageService.GetItemAsync<List<SearchHistoryItem>>(SearchHistoryKey) ?? new List<SearchHistoryItem>();
                searchSuggestions = searchHistory
                    .Where(s => s.Term.Contains(filters.Name, StringComparison.OrdinalIgnoreCase))
                    .OrderByDescending(s => s.Timestamp)
                    .Select(s => s.Term)
                    .Take(5)
                    .ToList();
                showSuggestions = searchSuggestions.Any();
            }
            else
            {
                showSuggestions = false;
            }
            StateHasChanged();
        });
    }

    private void SelectSuggestion(string suggestion)
    {
        filters.Name = suggestion;
        showSuggestions = false;
    }

    private void EditProduct(int productId) => Navigation.NavigateTo($"/product/edit/{productId}");
    private void AddNewProduct() => Navigation.NavigateTo("/product/edit/0");
    private void ViewProduct(int productId) => Navigation.NavigateTo($"/product/edit/{productId}");
    private async Task AddToCart(int productId)
    {
        await SpinnerService.ShowSpinnerAsync();
        var existingCartItem = await CartService.GetCartItemByProductIdForUser(productId);
        if (existingCartItem != null)
        {
            await CartService.UpdateCartItemAsync(new CartItemRequest
            {
                ProductId = existingCartItem.ProductId,
                Quantity = existingCartItem.Quantity + 1,
            }, existingCartItem.Id);
        }
        else
        {
            var newCartItem = new CartItemRequest
            {
                ProductId = productId,
                Quantity = 1,
            };
            await CartService.AddCartItemAsync(newCartItem);
            currentCountOfCartItems = await CartService.GetCountOfCartItemsAsync();
        }

        await SpinnerService.HideSpinnerAsync();
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }


    private void ConfirmDelete(int productId) { productIdToDelete = productId; showDeleteModal = true; }
    private void CloseDeleteModal() => showDeleteModal = false;
    private async Task DeleteProduct() { await SpinnerService.ShowSpinnerAsync(); await ProductService.DeleteProductAsync(productIdToDelete); products = await ProductService.GetProductsAsync(filters); showDeleteModal = false; await SpinnerService.HideSpinnerAsync(); }
    private async Task ClearFilters() { await SpinnerService.ShowSpinnerAsync(); filters = new ProductFilters(); products = await ProductService.GetProductsAsync(filters); await SpinnerService.HideSpinnerAsync(); }
}

<style>
    .search-container {
        position: relative;
    }

    .floating-cart {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        background-color: #28a745;
        color: white;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1.5rem;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        z-index: 1000;
    }

        .floating-cart:hover {
            background-color: #218838;
        }

    .cart-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background: red;
        color: white;
        font-size: 0.9rem;
        font-weight: bold;
        width: 22px;
        height: 22px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .suggestions-dropdown {
        position: absolute;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
    }

    .suggestion-item {
        padding: 8px 12px;
        cursor: pointer;
    }

        .suggestion-item:hover {
            background-color: #f8f9fa;
        }
</style>