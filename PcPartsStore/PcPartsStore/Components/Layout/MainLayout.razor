@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using PcPartsStore.Data
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject UserManager<Data.ApplicationUser> UserManager
@inject SignInManager<Data.ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-between align-items-center">
            @if (isAuthenticated)
            {
                <div class="user-card d-flex align-items-center">
                    <div class="user-icon">
                        <span class="bi bi-person-circle"></span>
                    </div>
                    <div class="user-info">
                        <span>@fullName</span>
                    </div>
                </div>

                <form action="Account/Logout" method="post" class="logout-form">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="btn btn-outline-danger">
                        <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                    </button>
                </form>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private string? currentUrl;
    private string fullName = "Guest";
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            isAuthenticated = true;
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                fullName = appUser.FullName ?? "User";
            }
        }
    }
}
